/*
 * This buildscript shows how mlcp dependencies can be easily declared and then uses in a Gradle configuration named
 * "mlcp". This configuration is then used as the classpath for MlcpTask, which is a simple extension of Gradle's
 * JavaExec task that exposes mlcp arguments as task attributes.
 */

plugins {
	id "com.marklogic.ml-gradle" version "3.13.0"
}

repositories {
	jcenter()

	// Needed for some mlcp dependencies, such as commons-csv:1.5.1-marklogic
	maven { url "http://developer.marklogic.com/maven2/" }
}


configurations {
	mlcp
}

dependencies {
	mlcp "com.marklogic:mlcp:9.0.7"

	/**
	 * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
	 * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
	 * mlcp include a directory or some other resource that provides a log4j.properties file.
	 */
	mlcp files("lib")
}



task importData(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	output_collections = "zomato"
  document_type = "json"
  input_file_type= "delimited_text"
	output_permissions = "rest-reader,read,rest-writer,update"
	output_uri_replace = ".*data,''"

	/**
	 * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
	 * as a text document. This can also be a variable, Gradle property, etc.
	 */
	logOutputUri = "/mlcp-log.txt"

	/**
	 * The args array can be used for any MLCP parameters that are not supported by the MlcpBean class that MlcpTask
	 * delegates to. input_file_path is supported by MlcpTask; this is just included as an example of using the args
	 * array.
 	 */
	args = ["-input_file_path", "data"]
}
